name: Development Build and Test

on: 
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests job'
        required: false
        default: true
        type: boolean
      run_build:
        description: 'Run build job'
        required: false
        default: true
        type: boolean
      run_publish:
        description: 'Run publish job'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write

env:
  DOCKER_IMAGE: akshaychikhalkar/carla-driving-simulator-client
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # ========================= TESTING MATRIX =========================
  
  test:
    name: Test ${{ matrix.test-suite }}
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || github.event.inputs.run_tests == 'true'
    strategy:
      matrix:
        test-suite: [carla-simulator, web-backend, frontend, integration]
        include:
          - test-suite: carla-simulator
            test-path: carla_simulator/tests
            cov-module: carla_simulator
            report-name: carla-simulator-test-report.html
            env-vars: "TESTING=true DATABASE_URL=sqlite:///:memory: CONFIG_TENANT_ID=1"
          - test-suite: web-backend
            test-path: web/backend/tests
            cov-module: web.backend
            report-name: web-backend-test-report.html
            env-vars: "TESTING=true WEB_FILE_LOGS_ENABLED=false DISABLE_AUTH_FOR_TESTING=true DATABASE_URL=sqlite:///:memory: CONFIG_TENANT_ID=1"
          - test-suite: frontend
            test-path: web/frontend
            cov-module: frontend
            report-name: frontend-test-report.html
            env-vars: "CI=true NODE_ENV=test"
          - test-suite: integration
            test-path: tests
            cov-module: integration
            report-name: integration-test-report.html
            env-vars: "TESTING=true DATABASE_URL=sqlite:///:memory: CONFIG_TENANT_ID=1"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        if: matrix.test-suite != 'frontend'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements/requirements.txt

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        if: matrix.test-suite == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/frontend/package-lock.json

      - name: Cache pip dependencies
        if: matrix.test-suite != 'frontend'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        if: matrix.test-suite != 'frontend'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install pytest-cov pytest-html pytest-xdist

      - name: Install frontend dependencies
        if: matrix.test-suite == 'frontend'
        run: npm install
        working-directory: web/frontend

      - name: Run ${{ matrix.test-suite }} tests
        if: matrix.test-suite != 'frontend' && matrix.test-suite != 'integration'
        run: |
          python -m pytest ${{ matrix.test-path }} \
            --cov=${{ matrix.cov-module }} \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --html=reports/${{ matrix.report-name }} \
            --self-contained-html \
            -v \
            --tb=short \
            --junitxml=reports/${{ matrix.test-suite }}-junit.xml
        env:
          TESTING: "true"
          DATABASE_URL: "sqlite:///:memory:"
          CONFIG_TENANT_ID: "1"
          WEB_FILE_LOGS_ENABLED: "false"
          DISABLE_AUTH_FOR_TESTING: "true"

      - name: Run frontend tests
        if: matrix.test-suite == 'frontend'
        run: npm run test:ci
        working-directory: web/frontend
        env:
          CI: true
          NODE_ENV: test

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          # Check if there are any integration tests
          if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            python -m pytest tests \
              --cov=. \
              --cov-report=xml \
              --cov-report=html \
              --cov-report=term-missing \
              --html=reports/${{ matrix.report-name }} \
              --self-contained-html \
              -v \
              --tb=short \
              --junitxml=reports/${{ matrix.test-suite }}-junit.xml
          else
            echo "No integration tests found - skipping"
            exit 0
          fi
        env:
          TESTING: "true"
          DATABASE_URL: "sqlite:///:memory:"
          CONFIG_TENANT_ID: "1"

      - name: Upload ${{ matrix.test-suite }} test coverage
        if: matrix.test-suite != 'integration' || success()
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: ${{ matrix.test-suite }}-dev
          name: ${{ matrix.test-suite }}-dev-coverage

      - name: Upload ${{ matrix.test-suite }} test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.test-suite }}-dev-test-results
          path: |
            reports/${{ matrix.report-name }}
            reports/${{ matrix.test-suite }}-junit.xml
            htmlcov/

  # ========================= VERSION (Development) =========================
  
  version:
    name: Get development version
    runs-on: ubuntu-latest
    needs: [test]
    if: (github.event_name == 'push') || github.event.inputs.run_build == 'true'
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      docker_tag: ${{ steps.get_version.outputs.dockerTag }}
      build_time: ${{ steps.get_version.outputs.buildTime }}
    steps:
      - name: Get development version
        id: get_version
        run: |
          VERSION="dev-$(git rev-parse --short HEAD)"
          DOCKER_TAG="v$VERSION"
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "dockerTag=$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "buildTime=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "Development version: $VERSION"
          echo "Docker tag: $DOCKER_TAG"
          echo "Build time: $BUILD_TIME"

  # ========================= BUILD MATRIX =========================

  build:
    name: Build ${{ matrix.build-component }}
    runs-on: ubuntu-latest
    needs: [test, version]
    if: (github.event_name == 'push') || github.event.inputs.run_build == 'true'
    strategy:
      matrix:
        build-component: [python-package, docker-image, documentation]
        include:
          - build-component: python-package
            description: "Python Package"
          - build-component: docker-image
            description: "Docker Image"
          - build-component: documentation
            description: "Documentation"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        if: matrix.build-component != 'docker-image'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        if: matrix.build-component == 'documentation'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Docker Buildx
        if: matrix.build-component == 'docker-image'
        uses: docker/setup-buildx-action@v3

      - name: Cache pip dependencies
        if: matrix.build-component != 'docker-image'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-build-

      - name: Install Python dependencies
        if: matrix.build-component != 'docker-image'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install build setuptools wheel twine

      - name: Install Mermaid CLI
        if: matrix.build-component == 'documentation'
        run: npm install -g @mermaid-js/mermaid-cli

      - name: Build Python package
        if: matrix.build-component == 'python-package'
        run: |
          # Clean any existing builds
          rm -rf dist/ build/ *.egg-info/
          # Build package using modern build system
          python -m build

      - name: Build Docker image
        if: matrix.build-component == 'docker-image'
        run: |
          # Validate Dockerfile existence
          if [ ! -f "deployment/docker/Dockerfile" ]; then
            echo "Error: Dockerfile not found at deployment/docker/Dockerfile"
            exit 1
          fi
          
          # Use centralized version and build time
          VERSION="${{ needs.version.outputs.version }}"
          DOCKER_TAG="${{ needs.version.outputs.docker_tag }}"
          BUILD_TIME="${{ needs.version.outputs.build_time }}"
          
          # Build Docker image with centralized values
          docker build -f deployment/docker/Dockerfile -t ${{ env.DOCKER_IMAGE }}:$VERSION \
            --build-arg VERSION=$VERSION \
            --build-arg DOCKER_TAG=$DOCKER_TAG \
            --build-arg BUILD_TIME=$BUILD_TIME \
            --build-arg ENVIRONMENT=development \
            .
          
          echo "Docker image built successfully with version: $VERSION"

      - name: Build documentation
        if: matrix.build-component == 'documentation'
        run: |
          # Run the comprehensive documentation automation script
          python docs/auto_generate_docs.py

      - name: Upload Python package artifact
        if: matrix.build-component == 'python-package'
        uses: actions/upload-artifact@v4
        with:
          name: python-package-dev
          path: dist/

      - name: Save Docker image
        if: matrix.build-component == 'docker-image'
        run: |
          # Use centralized version
          VERSION="${{ needs.version.outputs.version }}"
          docker save ${{ env.DOCKER_IMAGE }}:$VERSION | gzip > docker-image.tar.gz

      - name: Upload Docker image artifact
        if: matrix.build-component == 'docker-image'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-dev
          path: docker-image.tar.gz

      - name: Upload documentation artifact
        if: matrix.build-component == 'documentation'
        uses: actions/upload-artifact@v4
        with:
          name: html-docs-dev
          path: docs/_build/html/

  # ========================= PUBLISH MATRIX =========================

  publish:
    name: Publish ${{ matrix.publish-target }}
    runs-on: ubuntu-latest
    needs: [build, version]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_publish == 'true')
    strategy:
      matrix:
        publish-target: [docker]
        include:
          - publish-target: docker
            description: "Docker Image"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker credentials
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "❌ Docker Hub credentials not configured. Skipping Docker publish."
            exit 1
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-dev
          path: ./

      - name: Publish to Docker Hub
        run: |
          # Use centralized version and build time
          VERSION="${{ needs.version.outputs.version }}"
          DOCKER_TAG="${{ needs.version.outputs.docker_tag }}"
          
          # Load and tag Docker image
          gunzip -c docker-image.tar.gz | docker load
          docker tag ${{ env.DOCKER_IMAGE }}:$VERSION ${{ env.DOCKER_IMAGE }}:dev
          docker tag ${{ env.DOCKER_IMAGE }}:$VERSION ${{ env.DOCKER_IMAGE }}:develop
          docker tag ${{ env.DOCKER_IMAGE }}:$VERSION ${{ env.DOCKER_IMAGE }}:$VERSION
          
          # Push to Docker Hub
          docker push ${{ env.DOCKER_IMAGE }}:dev
          docker push ${{ env.DOCKER_IMAGE }}:develop
          docker push ${{ env.DOCKER_IMAGE }}:$VERSION
          
          echo "Docker image published successfully: $VERSION"
