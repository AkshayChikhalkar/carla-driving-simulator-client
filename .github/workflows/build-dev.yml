name: Development Build and Test

on: 
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests job'
        required: false
        default: true
        type: boolean
      run_build:
        description: 'Run build job'
        required: false
        default: true
        type: boolean
      run_docker_publish:
        description: 'Run docker publish'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write

env:
  DOCKER_IMAGE: akshaychikhalkar/carla-driving-simulator-client
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # ========================= TESTING PHASE =========================
  
  # Backend Tests - Carla Simulator
  test-carla-simulator:
    name: Test Carla Simulator
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.run_tests == 'true'
    strategy:
      matrix:
        python-version: [3.11]
        test-path: ["carla_simulator/tests"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install pytest-cov pytest-html pytest-xdist

      - name: Run Carla Simulator tests
        run: |
          python -m pytest ${{ matrix.test-path }} \
            --cov=carla_simulator \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --html=reports/carla-simulator-test-report.html \
            --self-contained-html \
            -v \
            --tb=short
        env:
          TESTING: "true"
          DATABASE_URL: "sqlite:///:memory:"
          CONFIG_TENANT_ID: "1"

      - name: Upload Carla Simulator test coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: carla-simulator-dev
          name: carla-simulator-dev-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Carla Simulator test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: carla-simulator-dev-test-results
          path: |
            reports/carla-simulator-test-report.html
            htmlcov/

  # Backend Tests - Web Backend
  test-web-backend:
    name: Test Web Backend
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.run_tests == 'true'
    strategy:
      matrix:
        python-version: [3.11]
        test-path: ["web/backend/tests"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install pytest-cov pytest-html pytest-xdist

      - name: Run Web Backend tests
        run: |
          python -m pytest ${{ matrix.test-path }} \
            --cov=web.backend \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --html=reports/web-backend-test-report.html \
            --self-contained-html \
            -v \
            --tb=short
        env:
          TESTING: "true"
          WEB_FILE_LOGS_ENABLED: "false"
          DISABLE_AUTH_FOR_TESTING: "true"
          DATABASE_URL: "sqlite:///:memory:"
          CONFIG_TENANT_ID: "1"

      - name: Upload Web Backend test coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: web-backend-dev
          name: web-backend-dev-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Web Backend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: web-backend-dev-test-results
          path: |
            reports/web-backend-test-report.html
            htmlcov/

  # Frontend Tests
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.run_tests == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm install
        working-directory: web/frontend

      - name: Run frontend tests
        run: npm run test:ci
        working-directory: web/frontend
        env:
          CI: true
          NODE_ENV: test

      - name: Upload frontend test coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: akshaychikhalkar/carla-driving-simulator-client
          flags: frontend-dev
          name: frontend-dev-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload frontend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-dev-test-results
          path: web/frontend/coverage/

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-carla-simulator, test-web-backend, test-frontend]
    if: always() && (github.event_name == 'push' || github.event.inputs.run_tests == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Generate test summary
        run: |
          echo "## Development Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check Carla Simulator tests
          if [ "${{ needs.test-carla-simulator.result }}" == "success" ]; then
            echo "‚úÖ **Carla Simulator Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Carla Simulator Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check Web Backend tests
          if [ "${{ needs.test-web-backend.result }}" == "success" ]; then
            echo "‚úÖ **Web Backend Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Web Backend Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check Frontend tests
          if [ "${{ needs.test-frontend.result }}" == "success" ]; then
            echo "‚úÖ **Frontend Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Frontend Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Coverage Reports**: Available in the artifacts" >> $GITHUB_STEP_SUMMARY
          echo "üìã **Test Reports**: Available in the artifacts" >> $GITHUB_STEP_SUMMARY
          echo "üîß **Environment**: Development" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any tests failed
        if: |
          needs.test-carla-simulator.result != 'success' ||
          needs.test-web-backend.result != 'success' ||
          needs.test-frontend.result != 'success'
        run: |
          echo "‚ùå Some tests failed. Please check the test results above."
          exit 1

  # ========================= BUILD PHASE =========================

  build-documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.event_name == 'push' || github.event.inputs.run_build == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install sphinx sphinx-autodoc-typehints

      - name: Install Mermaid CLI
        run: npm install -g @mermaid-js/mermaid-cli

      - name: Run documentation automation
        run: |
          # Run the comprehensive documentation automation script
          # This handles: mmd generation, image conversion, API docs, and HTML build
          python docs/auto_generate_docs.py

      - name: Upload built docs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-docs-dev
          path: docs/_build/html/

      - name: Upload documentation source
        uses: actions/upload-artifact@v4
        with:
          name: docs-source-dev
          path: |
            docs/
            mmd/
            .readthedocs.yaml

  # Removed redundant docker-build-test job - Docker build validation is handled in publish-docker-dev job

  # ========================= PUBLISH PHASE =========================

  build-and-publish:
    name: Build and Publish (Development)
    runs-on: ubuntu-latest
    needs: [test-summary, build-documentation]
    if: github.event_name == 'push' || github.event.inputs.run_build == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-dev
          path: dist/

  publish-docker-dev:
    name: Publish Development Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && github.event.inputs.run_docker_publish == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Validate Dockerfile existence
        run: |
          if [ ! -f "deployment/docker/Dockerfile" ]; then
            echo "Error: Dockerfile not found at deployment/docker/Dockerfile"
            exit 1
          fi
          if [ ! -f "deployment/docker/Dockerfile.dev" ]; then
            echo "Warning: Dockerfile.dev not found at deployment/docker/Dockerfile.dev"
          fi
          echo "‚úÖ Dockerfile validation passed"

      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/docker/Dockerfile.dev
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:dev
            ${{ env.DOCKER_IMAGE }}:dev-$(git rev-parse --short HEAD)
            ${{ env.DOCKER_IMAGE }}:develop
          build-args: |
            VERSION=dev-$(git rev-parse --short HEAD)
            DOCKER_IMAGE_TAG=dev-$(git rev-parse --short HEAD)
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            ENVIRONMENT=development

      - name: Build and push production image (dev version)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:prod-dev
            ${{ env.DOCKER_IMAGE }}:prod-dev-$(git rev-parse --short HEAD)
          build-args: |
            VERSION=dev-$(git rev-parse --short HEAD)
            DOCKER_IMAGE_TAG=dev-$(git rev-parse --short HEAD)
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            ENVIRONMENT=development
