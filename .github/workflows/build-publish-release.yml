name: Run tests, build, publish and release

on: 
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests job'
        required: false
        default: true
        type: boolean
      run_docker_tests:
        description: 'Run docker build tests'
        required: false
        default: true
        type: boolean
      run_build:
        description: 'Run build job'
        required: false
        default: true
        type: boolean
      run_docker_publish:
        description: 'Run docker publish'
        required: false
        default: true
        type: boolean
      run_pypi_publish:
        description: 'Run PyPI publish'
        required: false
        default: true
        type: boolean
      run_github_release:
        description: 'Run GitHub release'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write

env:
  DOCKER_IMAGE: akshaychikhalkar/carla-driving-simulator-client

jobs:
  detect-changes:
    name: Detect changes and determine what to build
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      database-changed: ${{ steps.changes.outputs.database }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      any-changed: ${{ steps.changes.outputs.any }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Get the list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          
          # If no previous commit, consider everything changed
          if [ -z "$CHANGED_FILES" ]; then
            echo "No previous commit found, considering all components changed"
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "database=true" >> $GITHUB_OUTPUT
            echo "docs=true" >> $GITHUB_OUTPUT
            echo "any=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for backend changes
          if echo "$CHANGED_FILES" | grep -E "(src/|web/backend/|requirements|setup.py|run.py|config/)" > /dev/null; then
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "Backend changes detected"
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for frontend changes
          if echo "$CHANGED_FILES" | grep -E "(web/frontend/|package.json|package-lock.json)" > /dev/null; then
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "Frontend changes detected"
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for database changes
          if echo "$CHANGED_FILES" | grep -E "(database/|db_|sql)" > /dev/null; then
            echo "database=true" >> $GITHUB_OUTPUT
            echo "Database changes detected"
          else
            echo "database=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for docs changes
          if echo "$CHANGED_FILES" | grep -E "(docs/|README|CHANGELOG)" > /dev/null; then
            echo "docs=true" >> $GITHUB_OUTPUT
            echo "Documentation changes detected"
          else
            echo "docs=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if any component changed
          if echo "$CHANGED_FILES" | grep -E "(src/|web/|requirements|setup.py|run.py|config/|database/)" > /dev/null; then
            echo "any=true" >> $GITHUB_OUTPUT
            echo "Application changes detected"
          else
            echo "any=false" >> $GITHUB_OUTPUT
          fi

  version-bump:
    name: Bump version and create tag
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      version: ${{ steps.bump_version.outputs.newTag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          # Get the latest version tag
          CURRENT_VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 2>/dev/null || echo "v1.0.0")
          # Remove 'v' prefix
          CURRENT_VERSION=${CURRENT_VERSION#v}
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump type
        id: bump_type
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          # Determine bump type based on commit message
          if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Bump type: major (breaking change detected)"
          elif echo "$COMMIT_MSG" | grep -q "^feat:"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Bump type: minor (feature detected)"
          elif echo "$COMMIT_MSG" | grep -q "^fix:"; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Bump type: patch (fix detected)"
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Bump type: patch (default)"
          fi

      - name: Calculate new version
        id: bump_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Bump version based on type
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "newTag=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.newTag }}"
          TAG_NAME="v$NEW_VERSION"
          
          # Check if tag already exists
          if git tag -l "$TAG_NAME" | grep -q "$TAG_NAME"; then
            echo "Tag $TAG_NAME already exists, skipping tag creation"
          else
            # Create tag
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            echo "Created tag: $TAG_NAME"
            
            # Push tag
            git push origin "$TAG_NAME"
            echo "Pushed tag: $TAG_NAME"
          fi

  test:
    name: Run tests and collect coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.run_tests == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-docker.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          # Install CARLA wheel for Linux
          pip install ./wheels/carla-0.10.0-cp311-cp311-linux_x86_64.whl
          pip install -r requirements-docker.txt
          # Don't install duplicate dependencies from web/backend/requirements.txt
          # as they're already in requirements-docker.txt

      - name: Run Python tests
        run: pytest --cov=src --cov-branch --cov-report=xml tests/
        env:
          TESTING: "true"
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: akshaychikhalkar/carla-driving-simulator-client

  docker-build-test:
    name: Test Docker Builds and Save Images
    runs-on: ubuntu-latest
    needs: [test, detect-changes]
    if: github.event_name == 'push' || inputs.run_docker_tests == 'true'
    outputs:
      backend-image: ${{ steps.save_backend.outputs.image }}
      frontend-image: ${{ steps.save_frontend.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version
        id: get_version
        run: |
          VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 | sed 's/^v//' 2>/dev/null || echo "latest")
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_ENV

      - name: Update version information
        run: |
          chmod +x scripts/update_version.sh
          ./scripts/update_version.sh ${{ steps.get_version.outputs.version }} ${{ env.BUILD_TIME }}

      - name: Test Backend Dockerfile
        if: needs.detect-changes.outputs.backend-changed == 'true'
        run: |
          docker build -f docker/backend/Dockerfile \
            --build-arg VERSION=${{ steps.get_version.outputs.version }} \
            --build-arg BUILD_TIME=${{ env.BUILD_TIME }} \
            -t test-backend .
          echo "Backend Dockerfile builds successfully"

      - name: Test Frontend Dockerfile
        if: needs.detect-changes.outputs.frontend-changed == 'true'
        run: |
          docker build -f docker/frontend/Dockerfile \
            --build-arg VERSION=${{ steps.get_version.outputs.version }} \
            --build-arg BUILD_TIME=${{ env.BUILD_TIME }} \
            -t test-frontend .
          echo "Frontend Dockerfile builds successfully"

      - name: Test Docker Compose
        run: |
          # Test docker compose build
          docker compose -f docker/compose/docker-compose-full-prod.yml build
          echo "Docker Compose build successful"
          
          # Test docker compose config validation
          docker compose -f docker/compose/docker-compose-full-prod.yml config
          echo "Docker Compose configuration is valid"

      - name: Save backend image as artifact
        id: save_backend
        if: needs.detect-changes.outputs.backend-changed == 'true'
        run: |
          docker save test-backend | gzip > backend-image.tar.gz
          echo "image=backend-image.tar.gz" >> $GITHUB_OUTPUT
          echo "Backend image saved as artifact"

      - name: Save frontend image as artifact
        id: save_frontend
        if: needs.detect-changes.outputs.frontend-changed == 'true'
        run: |
          docker save test-frontend | gzip > frontend-image.tar.gz
          echo "image=frontend-image.tar.gz" >> $GITHUB_OUTPUT
          echo "Frontend image saved as artifact"

      - name: Upload Docker images as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            backend-image.tar.gz
            frontend-image.tar.gz
          retention-days: 1

  build:
    needs: [test, docker-build-test, version-bump, detect-changes]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.run_build == 'true'
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-docker.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install CARLA wheel for Linux
          pip install ./wheels/carla-0.10.0-cp311-cp311-linux_x86_64.whl
          pip install -r requirements-docker.txt
          pip install build twine
        env:
          PIP_CACHE_DIR: ~/.cache/pip

      - name: Get version from Git tags
        id: get_version
        run: |
          # Use the bumped version if available, otherwise get from latest tag
          if [ "${{ needs.version-bump.outputs.version }}" != "" ]; then
            VERSION="${{ needs.version-bump.outputs.version }}"
          else
            VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 | sed 's/^v//')
            # Fallback to git describe if no version tags exist
            if [ -z "$VERSION" ]; then
              VERSION=$(git describe --tags --always | sed 's/^v//' | sed 's/-.*$//')
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build Python package
        run: |
          # Clean any existing builds
          rm -rf dist/ build/ *.egg-info/
          # Set version environment variable for setup.py
          echo "PACKAGE_VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV
          # Build package
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  docker-publish:
    needs: [build, docker-build-test, detect-changes]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
        include:
          - component: backend
            dockerfile: docker/backend/Dockerfile
            condition: ${{ needs.detect-changes.outputs.backend-changed == 'true' }}
          - component: frontend
            dockerfile: docker/frontend/Dockerfile
            condition: ${{ needs.detect-changes.outputs.frontend-changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ./

      - name: Get version from Git tags
        id: get_version
        run: |
          VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 | sed 's/^v//')
          # Fallback to git describe if no version tags exist
          if [ -z "$VERSION" ]; then
            VERSION=$(git describe --tags --always | sed 's/^v//' | sed 's/-.*$//')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Get build time
        id: build_time
        run: |
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "build_time=$BUILD_TIME" >> $GITHUB_ENV

      - name: Update version information
        run: |
          chmod +x scripts/update_version.sh
          ./scripts/update_version.sh ${{ steps.get_version.outputs.version }} ${{ env.BUILD_TIME }}

      - name: Load ${{ matrix.component }} image
        run: |
          if [ -f "${{ matrix.component }}-image.tar.gz" ]; then
            gunzip -c ${{ matrix.component }}-image.tar.gz | docker load
            echo "${{ matrix.component }} image loaded successfully"
          else
            echo "${{ matrix.component }} image artifact not found, will build from scratch"
            echo "build_from_scratch=true" >> $GITHUB_ENV
          fi

      - name: Check if Docker image already exists
        id: check_docker
        run: |
          # Check if the specific version tag already exists
          if docker manifest inspect ${{ env.DOCKER_IMAGE }}/${{ matrix.component }}:${{ steps.get_version.outputs.version }} >/dev/null 2>&1; then
            echo "docker_exists=true" >> $GITHUB_OUTPUT
            echo "Docker image ${{ env.DOCKER_IMAGE }}/${{ matrix.component }}:${{ steps.get_version.outputs.version }} already exists, skipping publish"
          else
            echo "docker_exists=false" >> $GITHUB_OUTPUT
            echo "Docker image ${{ env.DOCKER_IMAGE }}/${{ matrix.component }}:${{ steps.get_version.outputs.version }} does not exist, will publish"
          fi

      - name: Build and push ${{ matrix.component }} image
        if: env.build_from_scratch == 'true' && steps.check_docker.outputs.docker_exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}/${{ matrix.component }}:latest
            ${{ env.DOCKER_IMAGE }}/${{ matrix.component }}:${{ steps.get_version.outputs.version }}
          build-args: |
            VERSION=${{ steps.get_version.outputs.version }}
            BUILD_TIME=${{ env.BUILD_TIME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          platforms: linux/amd64

      - name: Tag and push ${{ matrix.component }} image (reused)
        if: env.build_from_scratch != 'true' && steps.check_docker.outputs.docker_exists != 'true'
        run: |
          docker tag test-${{ matrix.component }} ${{ env.DOCKER_IMAGE }}/${{ matrix.component }}:latest
          docker tag test-${{ matrix.component }} ${{ env.DOCKER_IMAGE }}/${{ matrix.component }}:${{ steps.get_version.outputs.version }}
          
          # Push both tags
          docker push ${{ env.DOCKER_IMAGE }}/${{ matrix.component }}:latest
          docker push ${{ env.DOCKER_IMAGE }}/${{ matrix.component }}:${{ steps.get_version.outputs.version }}
          
          echo "${{ matrix.component }} image tagged and pushed successfully"

      - name: Skip Docker publish (already exists)
        if: steps.check_docker.outputs.docker_exists == 'true'
        run: |
          echo "Skipping Docker publish - version ${{ steps.get_version.outputs.version }} already exists"

  pypi-publish:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Verify PyPI token
        run: |
          echo "Checking PyPI token..."
          if [ -z "${{ secrets.PYPI_TOKEN }}" ]; then
            echo "Error: PYPI_TOKEN is not set"
            exit 1
          fi
          echo "PyPI token is set"

      - name: List files to upload
        run: ls -la dist/

      - name: Get version from Git tags
        id: get_version
        run: |
          VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 | sed 's/^v//')
          # Fallback to git describe if no version tags exist
          if [ -z "$VERSION" ]; then
            VERSION=$(git describe --tags --always | sed 's/^v//' | sed 's/-.*$//')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Check if PyPI package already exists
        id: check_pypi
        run: |
          # Check if the specific version already exists on PyPI
          if python -m twine check dist/* | grep -q "PASSED"; then
            # Try to check if version exists (this is a simple check)
            echo "checking_pypi=true" >> $GITHUB_OUTPUT
            echo "PyPI package version ${{ steps.get_version.outputs.version }} will be checked during upload"
          else
            echo "checking_pypi=false" >> $GITHUB_OUTPUT
            echo "PyPI package validation failed"
          fi

      - name: Publish to PyPI
        if: steps.check_pypi.outputs.checking_pypi == 'true'
        run: |
          echo "Uploading to PyPI..."
          python -m twine upload --skip-existing --verbose dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  github-release:
    needs: [build, docker-publish, pypi-publish]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Get version from Git tags
        id: get_version
        run: |
          VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 | sed 's/^v//')
          # Fallback to git describe if no version tags exist
          if [ -z "$VERSION" ]; then
            VERSION=$(git describe --tags --always | sed 's/^v//' | sed 's/-.*$//')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if GitHub release already exists
        id: check_release
        run: |
          # Check if the release already exists
          if gh release view "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "GitHub release v${{ steps.get_version.outputs.version }} already exists, skipping"
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
            echo "GitHub release v${{ steps.get_version.outputs.version }} does not exist, will create"
          fi

      - name: Create GitHub Release
        if: steps.check_release.outputs.release_exists != 'true'
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true
          body: |
            ## Docker Images
            
            ### Backend Image
            ```bash
            docker pull ${{ env.DOCKER_IMAGE }}/backend:latest
            docker run -p 8000:8000 ${{ env.DOCKER_IMAGE }}/backend:latest
            ```
            
            ### Frontend Image
            ```bash
            docker pull ${{ env.DOCKER_IMAGE }}/frontend:latest
            docker run -p 3000:3000 ${{ env.DOCKER_IMAGE }}/frontend:latest
            ```
            
            ### Specific Version
            ```bash
            docker pull ${{ env.DOCKER_IMAGE }}/backend:${{ steps.get_version.outputs.version }}
            docker pull ${{ env.DOCKER_IMAGE }}/frontend:${{ steps.get_version.outputs.version }}
            ```
            
            ### Docker Compose (Recommended)
            ```bash
            # Clone the repository
            git clone https://github.com/AkshayChikhalkar/carla-driving-simulator-client.git
            cd carla-driving-simulator-client
            
            # Run with docker-compose
            docker-compose -f docker/compose/docker-compose-full-prod.yml up --build
            
            # Or pull the latest images and run
            docker-compose -f docker/compose/docker-compose-full-prod.yml pull
            docker-compose -f docker/compose/docker-compose-full-prod.yml up
            ```
            
            ## Python Package
            
            Install via pip:
            ```bash
            pip install carla-driving-simulator-client==${{ steps.get_version.outputs.version }}
            ```
            
            ## Features
            
            - 🚗 CARLA autonomous driving simulation client
            - 🌐 Web-based frontend and backend API
            - 📊 Real-time visualization and analytics
            - 🎯 Scenario-based testing framework
            - 🐳 Docker and Docker Compose support
            - 📦 Multi-platform support (Linux/Windows)
            - 🔄 Separate container deployment
            - 📈 Automated version tracking
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip GitHub release (already exists)
        if: steps.check_release.outputs.release_exists == 'true'
        run: |
          echo "Skipping GitHub release - version v${{ steps.get_version.outputs.version }} already exists"

  docs:
    name: Build and Check Documentation
    runs-on: ubuntu-latest
    needs: [build, detect-changes]
    if: needs.detect-changes.outputs.docs-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r docs/requirements.txt || true
          pip install sphinx sphinx-autodoc-typehints

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/frontend/package-lock.json

      - name: Install Mermaid CLI
        run: npm install -g @mermaid-js/mermaid-cli

      - name: Run documentation automation
        run: |
          # Run the comprehensive documentation automation script
          # This handles: mmd generation, image conversion, API docs, and HTML build
          python docs/auto_generate_docs.py

      - name: Upload built docs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-docs
          path: docs/_build/html/

      - name: Install frontend dependencies
        run: npm ci
        working-directory: web/frontend 