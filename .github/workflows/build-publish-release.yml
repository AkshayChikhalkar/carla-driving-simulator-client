name: Main Release Pipeline

on:
  push:
    branches: [ CI/CD ]
  pull_request:
    types: [ closed ]
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version_bump_type:
        description: 'Manual version bump type (major, minor, patch)'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  packages: write

jobs:
  version-bump:
    name: Bump version and create tag
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/CI/CD') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.bump_version.outputs.newTag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 2>/dev/null || echo "v1.0.0")
          CURRENT_VERSION=${CURRENT_VERSION#v}
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump_type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "bump_type=${{ inputs.version_bump_type }}" >> $GITHUB_OUTPUT
          else
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE"; then
              echo "bump_type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMIT_MSG" | grep -q "^feat:"; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
            else
              echo "bump_type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Calculate and push new version tag
        id: bump_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case $BUMP_TYPE in
            "major") MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0;;
            "minor") MINOR=$((MINOR + 1)); PATCH=0;;
            "patch") PATCH=$((PATCH + 1));;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "newTag=$NEW_VERSION" >> $GITHUB_OUTPUT
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

  python-ci:
    name: "Test and Build Python Package"
    needs: version-bump
    uses: ./.github/workflows/reusable-python-ci.yml
    secrets: inherit
    with:
      python-version: '3.11'
      upload-coverage: true

  docker-ci:
    name: "Build and Publish Docker Image"
    needs: [version-bump, python-ci]
    uses: ./.github/workflows/reusable-docker-ci.yml
    secrets: inherit
    with:
      version: ${{ needs.version-bump.outputs.version }}
      publish: true

  release:
    name: "Publish to PyPI and GitHub Releases"
    needs: [version-bump, python-ci, docker-ci]
    uses: ./.github/workflows/reusable-release.yml
    secrets: inherit
    with:
      version: ${{ needs.version-bump.outputs.version }} 