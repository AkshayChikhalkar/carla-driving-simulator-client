name: Run tests, build, publish and release

on: 
  push:
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests job'
        required: false
        default: true
        type: boolean
      run_docker_tests:
        description: 'Run docker build tests'
        required: false
        default: true
        type: boolean
      run_build:
        description: 'Run build job'
        required: false
        default: true
        type: boolean
      run_docker_publish:
        description: 'Run docker publish'
        required: false
        default: false
        type: boolean
      run_pypi_publish:
        description: 'Run PyPI publish'
        required: false
        default: false
        type: boolean
      run_github_release:
        description: 'Run GitHub release'
        required: false
        default: false
        type: boolean

env:
  DOCKER_IMAGE: akshaychikhalkar/carla-driving-simulator-client

jobs:
  test:
    name: Run tests and collect coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.run_tests == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install pytest pytest-cov
          # Install CARLA wheel for Linux
          pip install ./wheels/carla-0.10.0-cp311-cp311-linux_x86_64.whl
          pip install -r requirements-docker.txt
          # Don't install duplicate dependencies from web/backend/requirements.txt
          # as they're already in requirements-docker.txt

      - name: Run Python tests
        run: pytest --cov=src --cov-branch --cov-report=xml tests/
        env:
          TESTING: "true"
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: AkshayChikhalkar/carla-driving-simulator-client

  docker-build-test:
    name: Test Docker Builds
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || inputs.run_docker_tests == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Production Dockerfile
        run: |
          docker build -t test-prod .
          echo "Production Dockerfile builds successfully"

      - name: Test Development Dockerfile
        run: |
          docker build -f Dockerfile.dev -t test-dev .
          echo "Development Dockerfile builds successfully"

      - name: Test Docker Compose
        run: |
          # Test docker compose build
          docker compose build
          echo "Docker Compose build successful"
          
          # Test docker compose config validation
          docker compose config
          echo "Docker Compose configuration is valid"

  build:
    needs: [test, docker-build-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.run_build == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-docker.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install CARLA wheel for Linux
          pip install ./wheels/carla-0.10.0-cp311-cp311-linux_x86_64.whl
          pip install -r requirements-docker.txt
          pip install build twine
        env:
          PIP_CACHE_DIR: ~/.cache/pip

      - name: Get version
        id: get_version
        run: |
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION)
          else
            VERSION=$(git describe --tags --always | sed 's/^v//' | sed 's/-.*$//')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build Python package
        run: |
          # Clean any existing builds
          rm -rf dist/ build/ *.egg-info/
          # Set version environment variable for setup.py
          echo "PACKAGE_VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV
          # Build package
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  docker-publish:
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/CI/CD') || inputs.run_docker_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Get version from VERSION file
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest
            type=raw,value=prod
            type=raw,value=${{ github.sha }}
            type=raw,value=${{ github.ref_name }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          platforms: linux/amd64

      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.dev
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:dev-${{ steps.get_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          platforms: linux/amd64

  pypi-publish:
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/CI/CD') || inputs.run_pypi_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Verify PyPI token
        run: |
          echo "Checking PyPI token..."
          if [ -z "${{ secrets.PYPI_TOKEN }}" ]; then
            echo "Error: PYPI_TOKEN is not set"
            exit 1
          fi
          echo "PyPI token is set"

      - name: List files to upload
        run: ls -la dist/

      - name: Get version from VERSION file
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Publish to PyPI
        run: |
          echo "Uploading to PyPI..."
          python -m twine upload --skip-existing --verbose dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  github-release:
    needs: [build, docker-publish, pypi-publish]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/CI/CD') || inputs.run_github_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Get version
        id: get_version
        run: |
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION)
          else
            VERSION=$(git describe --tags --always | sed 's/^v//' | sed 's/-.*$//')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true
          body: |
            ## Docker Images
            
            ### Production Image
            ```bash
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            docker run -p 3000:3000 -p 8000:8000 ${{ env.DOCKER_IMAGE }}:latest
            ```
            
            ### Development Image
            ```bash
            docker pull ${{ env.DOCKER_IMAGE }}:dev-${{ steps.get_version.outputs.version }}
            docker run -p 3000:3000 -p 8000:8000 ${{ env.DOCKER_IMAGE }}:dev-${{ steps.get_version.outputs.version }}
            ```
            
            ### Docker Compose (Recommended)
            ```bash
            # Clone the repository
            git clone https://github.com/AkshayChikhalkar/carla-driving-simulator-client.git
            cd carla-driving-simulator-client
            
            # Run with docker-compose
            docker-compose up --build
            
            # Or pull the latest image and run
            docker-compose pull
            docker-compose up
            ```
            
            ## Python Package
            
            Install via pip:
            ```bash
            pip install carla-driving-simulator-client==${{ steps.get_version.outputs.version }}
            ```
            
            ## Features
            
            - 🚗 CARLA autonomous driving simulation client
            - 🌐 Web-based frontend and backend API
            - 📊 Real-time visualization and analytics
            - 🎯 Scenario-based testing framework
            - 🐳 Docker and Docker Compose support
            - 📦 Multi-platform support (Linux/Windows)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 