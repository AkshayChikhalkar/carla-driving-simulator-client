name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ master, develop, staging ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Version bump (only on master branch)
  version-bump:
    name: Bump version and create tag
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      version: ${{ steps.bump_version.outputs.newTag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          # Get the latest version tag
          CURRENT_VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 2>/dev/null || echo "v1.0.0")
          # Remove 'v' prefix
          CURRENT_VERSION=${CURRENT_VERSION#v}
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump type
        id: bump_type
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          # Determine bump type based on commit message
          if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Bump type: major (breaking change detected)"
          elif echo "$COMMIT_MSG" | grep -q "^feat:"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Bump type: minor (feature detected)"
          elif echo "$COMMIT_MSG" | grep -q "^fix:"; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Bump type: patch (fix detected)"
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Bump type: patch (default)"
          fi

      - name: Calculate new version
        id: bump_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Bump version based on type
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "newTag=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.newTag }}"
          TAG_NAME="v$NEW_VERSION"
          
          # Check if tag already exists
          if git tag -l "$TAG_NAME" | grep -q "$TAG_NAME"; then
            echo "Tag $TAG_NAME already exists, skipping tag creation"
          else
            # Create tag
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            echo "Created tag: $TAG_NAME"
            
            # Push tag
            git push origin "$TAG_NAME"
            echo "Pushed tag: $TAG_NAME"
          fi

  # Backend: All activities in one job
  backend:
    name: Backend - All Activities
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Get version
        id: get_version
        run: |
          # Use the bumped version if available, otherwise get from latest tag or git describe
          if [ "${{ needs.version-bump.outputs.version }}" != "" ]; then
            VERSION="${{ needs.version-bump.outputs.version }}"
          else
            VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 | sed 's/^v//' 2>/dev/null || git describe --tags --always | sed 's/^v//' | sed 's/-.*$//')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-docker.txt

      - name: Run backend tests
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Build backend Docker image (Development)
        if: github.ref == 'refs/heads/develop'
        run: |
          docker build -f docker/backend/Dockerfile.dev -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-${{ steps.get_version.outputs.version }} .
          docker build -f docker/backend/Dockerfile.dev -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-latest .

      - name: Build backend Docker image (Staging)
        if: github.ref == 'refs/heads/staging'
        run: |
          docker build -f docker/backend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:staging-${{ steps.get_version.outputs.version }} .
          docker build -f docker/backend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:staging-latest .

      - name: Build backend Docker image (Production)
        if: github.ref == 'refs/heads/master' || github.event_name == 'release'
        run: |
          docker build -f docker/backend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:prod-${{ needs.version-bump.outputs.version }} .
          docker build -f docker/backend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest .

      - name: Push backend Docker image (Development)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-${{ steps.get_version.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:dev-latest

      - name: Push backend Docker image (Staging)
        if: github.ref == 'refs/heads/staging'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:staging-${{ steps.get_version.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:staging-latest

      - name: Push backend Docker image (Production)
        if: github.ref == 'refs/heads/master' || github.event_name == 'release'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:prod-${{ needs.version-bump.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest

      - name: Deploy to Development
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Deploying backend to development environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/dev/backend.yaml

      - name: Deploy to Staging
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "Deploying backend to staging environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/staging/backend.yaml

      - name: Deploy to Production
        if: github.ref == 'refs/heads/master' || github.event_name == 'release'
        run: |
          echo "Deploying backend to production environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/prod/backend.yaml

  # Frontend: All activities in one job
  frontend:
    name: Frontend - All Activities
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd web/frontend
          npm ci

      - name: Get version
        id: get_version
        run: |
          # Use the bumped version if available, otherwise get from latest tag or git describe
          if [ "${{ needs.version-bump.outputs.version }}" != "" ]; then
            VERSION="${{ needs.version-bump.outputs.version }}"
          else
            VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 | sed 's/^v//' 2>/dev/null || git describe --tags --always | sed 's/^v//' | sed 's/-.*$//')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Run frontend tests
        run: |
          cd web/frontend
          npm test -- --coverage --watchAll=false

      - name: Build frontend Docker image (Development)
        if: github.ref == 'refs/heads/develop'
        run: |
          docker build -f docker/frontend/Dockerfile.dev -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-${{ steps.get_version.outputs.version }} .
          docker build -f docker/frontend/Dockerfile.dev -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-latest .

      - name: Build frontend Docker image (Staging)
        if: github.ref == 'refs/heads/staging'
        run: |
          docker build -f docker/frontend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:staging-${{ steps.get_version.outputs.version }} .
          docker build -f docker/frontend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:staging-latest .

      - name: Build frontend Docker image (Production)
        if: github.ref == 'refs/heads/master' || github.event_name == 'release'
        run: |
          docker build -f docker/frontend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:prod-${{ needs.version-bump.outputs.version }} .
          docker build -f docker/frontend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest .

      - name: Push frontend Docker image (Development)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-${{ steps.get_version.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:dev-latest

      - name: Push frontend Docker image (Staging)
        if: github.ref == 'refs/heads/staging'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:staging-${{ steps.get_version.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:staging-latest

      - name: Push frontend Docker image (Production)
        if: github.ref == 'refs/heads/master' || github.event_name == 'release'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:prod-${{ needs.version-bump.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest

      - name: Deploy to Development
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Deploying frontend to development environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/dev/frontend.yaml

      - name: Deploy to Staging
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "Deploying frontend to staging environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/staging/frontend.yaml

      - name: Deploy to Production
        if: github.ref == 'refs/heads/master' || github.event_name == 'release'
        run: |
          echo "Deploying frontend to production environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/prod/frontend.yaml

  # Integration tests (runs after both backend and frontend complete)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run integration tests
        run: |
          docker-compose -f docker/compose/docker-compose.test.yml up --build --abort-on-container-exit
          docker-compose -f docker/compose/docker-compose.test.yml down

  # Documentation (only on master branch)
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install documentation dependencies
        run: |
          pip install sphinx sphinx-rtd-theme
          pip install -r docs/requirements.txt

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  # Security scan (only on master branch)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Notify team (runs after all deployments)
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration, docs, security]
    if: always() && (needs.backend.result == 'success' || needs.frontend.result == 'success')
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "Deployment successful! Notifying team..."
          # Add your notification logic here (Slack, email, etc.)

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed! Notifying team..."
          # Add your notification logic here (Slack, email, etc.) 