# .github/workflows/reusable-python-ci.yml
name: Reusable Python CI

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
        description: "The Python version to use"
      upload-coverage:
        required: false
        type: boolean
        description: "Upload coverage report to Codecov"
        default: false
    outputs:
      version:
        description: "The calculated version of the package"
        value: ${{ jobs.build.outputs.version }}
    secrets:
      CODECOV_TOKEN:
        required: false

jobs:
  test:
    name: Run tests and collect coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-docker.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install ./wheels/carla-0.10.0-cp311-cp311-linux_x86_64.whl
          pip install -r requirements-docker.txt

      - name: Run Python tests
        run: pytest --cov=src --cov-branch --cov-report=xml tests/
        env:
          TESTING: "true"
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload coverage to Codecov
        if: inputs.upload-coverage == true
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: akshaychikhalkar/carla-driving-simulator-client
          files: coverage.xml

  build:
    name: Build Python Package
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Get version from Git tags
        id: get_version
        run: |
          VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 | sed 's/^v//' || echo "1.0.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build Python package
        run: |
          echo "PACKAGE_VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 1 