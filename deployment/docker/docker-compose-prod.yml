version: '3.8'

services:
  carla-driving-simulator-client:
    image: akshaychikhalkar/carla-driving-simulator-client:latest
    #image: akshaychikhalkar/carla-simulator-client:dev_v1.5
    pull_policy: always
    container_name: carla-client
    shm_size: "2g"
    runtime: nvidia
    ulimits:
      stack: 67108864
    ports:
      - "8081:8000"  # Backend (remove 3000:3000 if not needed)
    environment:
      - PYTHONPATH=/app
      - REACT_APP_API_URL=http://localhost:8000
      # Database URL can be provided directly or via parts below
      - DATABASE_URL=${DATABASE_URL}
      - DB_HOST=${DB_HOST}
      - DB_HOSTIP=${DB_HOSTIP}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      # Optional tenant context for multitenant config
      - CONFIG_TENANT_ID=${CONFIG_TENANT_ID}
      - NVIDIA_VISIBLE_DEVICES=all
      - DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG:-1.0.0}
      - VERSION=${VERSION:-1.0.0}
      - BUILD_TIME=${BUILD_TIME:-2025-07-14T19:52:37Z}
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 140s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.healthcheck=true"
      - "prometheus.scrape=true"
      - "prometheus.port=8000"
      - "prometheus.path=/metrics"
      - "com.centurylinklabs.watchtower.lifecycle-hooks=true"
      - "com.centurylinklabs.watchtower.enable-label=true"
      - "app.version=${DOCKER_IMAGE_TAG:-latest}"
      - "app.build.version=${DOCKER_IMAGE_TAG:-latest}"
    volumes:
      - ../../logs:/app/logs
      - ../../reports:/app/reports
      - ../../config:/app/config
    depends_on:
      carla-server:
        condition: service_healthy
    networks:
      - carla-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  carla-server:
    image: carlasim/carla:0.10.0
    container_name: carla-server
    privileged: true
    runtime: nvidia
    ports:
      - "2000-2002:2000-2002"
    shm_size: "32g"
    ipc: host
    ulimits:
      memlock:
        soft: -1
        hard: -1
      stack:
        soft: 67108864
        hard: 67108864
    command: >
      ./CarlaUnreal.sh
      -RenderOffScreen
      -quality-level=High
      -fps=60
      -ResX=1920 -ResY=1080
      -opengl
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
    healthcheck:
      test: ["CMD", "pgrep", "-f", "CarlaUnreal"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - carla-network
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "3"

  watchtower:
    image: containrrr/watchtower:latest
    container_name: carla-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300   # Check every 5 minutes (300 seconds)
      - WATCHTOWER_LABEL_ENABLE=true   # Only monitor containers with the watchtower.enable=true label
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      - WATCHTOWER_HEALTH_CHECK=true   # Enable health check monitoring
      - TZ=UTC
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - carla-network
    healthcheck:
      test: ["CMD", "pgrep", "-f", "watchtower"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      carla-driving-simulator-client:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # Monitoring Stack
  prometheus:
    profiles: ["monitoring"]
    image: prom/prometheus:latest
    container_name: carla-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - carla-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      carla-driving-simulator-client:
        condition: service_healthy
      node-exporter:
        condition: service_healthy
      cadvisor:
        condition: service_healthy
      gpu-exporter:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Log Management with Loki
  loki:
    profiles: ["monitoring"]
    image: grafana/loki:latest
    container_name: carla-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ../monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - carla-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  promtail:
    profiles: ["monitoring"]
    image: grafana/promtail:latest
    container_name: carla-promtail
    restart: unless-stopped
    volumes:
      - ../monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../../logs:/app/logs:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - carla-network
    healthcheck:
      test: ["CMD", "pgrep", "-f", "promtail"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      loki:
        condition: service_healthy
      carla-driving-simulator-client:
        condition: service_healthy

  # System Metrics
  node-exporter:
    profiles: ["monitoring"]
    image: prom/node-exporter:latest
    container_name: carla-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - carla-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Container Metrics
  cadvisor:
    profiles: ["monitoring"]
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: carla-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - carla-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # GPU Metrics for DGX A100 (nvidia-smi based)
  gpu-exporter:
    profiles: ["monitoring"]
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    container_name: carla-gpu-exporter
    restart: unless-stopped
    ports:
      - "9445:9445"
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - carla-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9445/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s



  # Backup Service (Optional)
  backup:
    profiles: ["backup"]
    image: alpine:3.18
    container_name: carla-backup
    restart: "no"
    volumes:
      - ../../logs:/backup/logs:ro
      - ../../reports:/backup/reports:ro
      - ../../config:/backup/config:ro
      - backup_data:/backup/storage
    environment:
      - BACKUP_RETENTION_DAYS=7
    command: >
      sh -c "
        echo 'Starting backup at $$(date)'
        tar -czf /backup/storage/carla-backup-$$(date +%Y%m%d-%H%M%S).tar.gz 
          /backup/logs /backup/reports /backup/config
        find /backup/storage -name 'carla-backup-*.tar.gz' -mtime +$$BACKUP_RETENTION_DAYS -delete
        echo 'Backup completed at $$(date)'
      "
    networks:
      - carla-network

# Persistent Volumes
volumes:
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  backup_data:
    driver: local

# Network Configuration
networks:
  carla-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: carla-br0